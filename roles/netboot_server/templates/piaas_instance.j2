#!/bin/bash

set -e


function create() {
  declare -A args=(
    ["name"]=""
    ["image"]=""
  )

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --name|-n)
        args["name"]="$2"
        shift 2
        ;;
      --image|-i)
        args["image"]="$2"
        shift 2
        ;;
      *)
        echo "Unknown option: $1"
        exit 1
        ;;
    esac
  done

  if [ ! -d {{ netboot_server_nfs_root }}/${args["name"]} ]; then
    mkdir {{ netboot_server_nfs_root }}/${args["name"]}
    mkdir /mnt/${args["image"]}
    losetup -P /dev/loop0 {{ netboot_server_images_root }}/${args["image"]}.img
    mount -o ro -t ext4 /dev/loop0p2 /mnt/${args["image"]}
    mount -o ro -t vfat /dev/loop0p1 /mnt/${args["image"]}/boot/firmware
    rsync -a /mnt/${args["image"]}/ {{ netboot_server_nfs_root }}/${args["name"]}
    sudo umount /mnt/${args["image"]}/boot/firmware
    sudo umount /mnt/${args["image"]}
    sudo losetup -d /dev/loop0
    rm -rf /mnt/${args["image"]}

    echo > {{ netboot_server_nfs_root }}/${args["name"]}/etc/fstab
    echo "proc /proc proc defaults 0 0" >> {{ netboot_server_nfs_root }}/${args["name"]}/etc/fstab
    echo "{{ netboot_server_ip_address }}:{{ netboot_server_nfs_root }}/${args["name"]}/boot/firmware /boot/firmware nfs defaults,vers=4.1,proto=tcp 0 0" >>  {{ netboot_server_nfs_root }}/${args["name"]}/etc/fstab

    echo "console=serial0,115200 console=tty1 root=/dev/nfs nfsroot={{ netboot_server_ip_address }}:{{ netboot_server_nfs_root }}/${args["name"]},vers=3 rw ip=dhcp rootwait quite init=/usr/lib/raspberrypi-sys-mods/firstboot" >  {{ netboot_server_nfs_root }}/${args["name"]}/boot/firmware/cmdline.txt
    rm  {{ netboot_server_nfs_root }}/${args["name"]}/etc/init.d/resize2fs_once
    sed "s/hostname =.*/hostname = \"${args["name"]}\"/g"  {{ netboot_server_config_root }}/custom.toml >  {{ netboot_server_nfs_root }}/${args["name"]}/boot/firmware/custom.toml

    # enable vnc without monitor connected
    mkdir {{ netboot_server_nfs_root }}/${args["name"]}/etc/skel/.config/
    printf "[output:HDMI-A-1]\nmode = 1920x1080@60\n" > {{ netboot_server_nfs_root }}/${args["name"]}/etc/skel/.config/wayfire.ini


  else
    echo instance with name ${args["name"]} already exists
  fi

}


function delete(){
  declare -A args=(
    ["name"]=""
  )

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --name|-n)
        args["name"]="$2"
        shift 2
        ;;
      *)
        echo "Unknown option: $1"
        exit 1
        ;;
    esac
  done

  # add check if instance is linked/running
  # for file in $(find /data/tftpboot/ -type l); do  readlink  "$file"; done
  if [ -d {{ netboot_server_nfs_root }}/${args["name"]} ]; then
    rm -rf {{ netboot_server_nfs_root }}/${args["name"]}
  else
    echo instance with name ${args["name"]} does not exists
  fi

}



function allocate_node() {
  declare -A args=(
    ["instance_name"]=""
    ["node_serial"]=""
  )

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --instance_name|-n)
        args["name"]="$2"
        shift 2
        ;;
      --node_serial|-s)
        args["serial"]="$2"
        shift 2
        ;;
      *)
        echo "Unknown option: $1"
        exit 1
        ;;
    esac
  done

  ln -s {{ netboot_server_nfs_root }}/${args["name"]}/boot/firmware {{ netboot_server_tftp_root }}/${args["serial"]}

}


function unallocate_node() {
  declare -A args=(
    ["node_serial"]=""
  )

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --node_serial|-s)
        args["serial"]="$2"
        shift 2
        ;;
      *)
        echo "Unknown option: $1"
        exit 1
        ;;
    esac
  done

  rm {{ netboot_server_tftp_root }}/${args["serial"]}
}

if [[ "$1" != "_"* ]]; then
  "$@"
else
  echo "Unknown subcommand: $1"
fi
